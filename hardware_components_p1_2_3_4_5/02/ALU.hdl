// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, b[0]=false, sel=zx, out=muxZX);
    Not16(in=muxZX, out=notMuxZX);
    Mux16(a=muxZX, b=notMuxZX, sel=nx, out=muxNX);
    Mux16(a=y, b[0]=false, sel=zy, out=muxZY);
    Not16(in=muxZY, out=notMuxZY);
    Mux16(a=muxZY, b=notMuxZY, sel=ny, out=muxNY);
    
    Add16(a =muxNX, b =muxNY, out =RCAout);
    And16(a= muxNX, b=muxNY, out=ANDout);
    Mux16(a=ANDout, b=RCAout, sel=f, out=preout);

    Not16(in=preout, out=notPreout);
    Mux16(a=preout, b=notPreout, sel=no, out=out,
         out[15]=outUp7,
         out[14]=outUp6,
         out[13]=outUp5,
         out[12]=outUp4,
         out[11]=outUp3,
         out[10]=outUp2,
         out[9]=outUp1,
         out[8]=outUp0,
         out[7]=outDown7,
         out[6]=outDown6,
         out[5]=outDown5,
         out[4]=outDown4,
         out[3]=outDown3,
         out[2]=outDown2,
         out[1]=outDown1,
         out[0]=outDown0);
    And(a=outUp7, b=true, out=ng);
    Or8Way(in[7]=outUp7, in[6]=outUp6, in[5]=outUp5, in[4]=outUp4,
            in[3]=outUp3, in[2]=outUp2, in[1]=outUp1, in[0]=outUp0 , out=semiUpZr);
    Or8Way(in[7]=outDown7, in[6]=outDown6, in[5]=outDown5, in[4]=outDown4,
            in[3]=outDown3, in[2]=outDown2, in[1]=outDown1, in[0]=outDown0 , out=semiDownZr);
    Or(a=semiUpZr, b=semiDownZr, out=something);
    Not(in=something, out=zr);
}