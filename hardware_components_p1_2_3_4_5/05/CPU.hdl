// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//A_instruction 0(v15)
    //C_instruction 111(a1)(c6)(d3)(j3)
    //d3= (loadA)(loadD)(loadM)
    And(a=outNg, b=instruction[2], out=NgJ2);
    And(a=outZr, b=instruction[1], out=ZrJ1);
    Not(in=outZr, out=notZr);
    Not(in=outNg, out=notNg);
    And(a=notZr, b=notNg, out=isPos);
    And(a=isPos, b=instruction[0], out=notNgnotZrJ0);
    Or(a= NgJ2, b= ZrJ1, out= semiOr);
    Or(a= semiOr, b= notNgnotZrJ0, out= jump);
    And(a= instruction[15], b=jump, out= realJump);
    Not(in=realJump , out= notJump);
    PC(in=outA, load=realJump, inc=notJump, reset=reset, out[0..14]=pc);

    Not(in=instruction[15], out= notInst15);
    Or(a= notInst15, b= instruction[5], out= loadA);
    Mux16(a= instruction, b= outALU, sel=instruction[15], out= inA);
    ARegister(in= inA, load=loadA, out=outA);//A_reg
    And16(a=outA, b=true, out[0..14]=addressM);
    
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);//D_reg

    And(a=instruction[15], b=instruction[12], out=Ca);
    Mux16(a=outA, b=inM, sel=Ca, out=outY);

    ALU(x=outD, y=outY, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=outALU, zr=outZr, ng=outNg);
    And16(a=outALU, b=true, out=outM);

    And(a=instruction[15], b=instruction[3], out=writeM);
}